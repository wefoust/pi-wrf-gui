;	This script plots the minimum value of surface temperature for the time period
;	Eliott Foust and Mary Haley    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	WRF & csv city-data files loaded from Run_WRF_GUI_NCL script


;	Setting workstation
wks_type           = "png"
wks_type@wkWidth   = 2048
wks_type@wkHeight  = 2048
wks=gsn_open_wks("png","/home/pi/pi-wrf/Output/Snow_Depth")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	


;	Reading in City Data
data       = csv_file(1:)
lats       = tofloat(str_get_field(data,2,","))
lons       = tofloat(str_get_field(data,3,","))
cities     = str_get_field(data,1,",")
;textformat = str_get_field(data,8,",")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;      Get Variables from WRF file
snow_pre         = wrf_user_getvar(a,"SNOWNC",-1)   ; Getting all times of temperature field
snow             = dim_sum_n(snow_pre,0)/25.4
printVarSummary(snow)

snow@units       = ""                              ; Labels
snow@description = ""                              ; Removing description text

wrf_lat = wrf_user_getvar(a,"XLAT",0)              ; Getting lat coordinates of domain
wrf_lon = wrf_user_getvar(a,"XLONG",0)             ; Getting lon coordinates of domain

min_lon = min(wrf_lon)
max_lon = max(wrf_lon)
min_lat = min(wrf_lat)
max_lat = max(wrf_lat) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;	Set Resources & Parameters
res             = True
res@gsnMaximize = True
res@gsnDraw     = False
res@gsnFrame    = False

res@mpDataBaseVersion =  "HighRes"    ; Medium resolution

res@mpLimitMode = "LatLon"     ; Limit the map area by latitude/longitude.
res@mpMinLonF   =  min(wrf_lon)
res@mpMaxLonF   =  max(wrf_lon)
res@mpMinLatF   =  min(wrf_lat)
res@mpMaxLatF   =  max(wrf_lat)

res@pmTickMarkDisplayMode = "Always"
res@mpPerimOn             =  False
res@tfDoNDCOverlay        = True
res@gsnAddCyclic          = False

res@mpOutlineBoundarySets       = "AllBoundaries"    ; Geographical Boundary Settings
res@mpDataBaseVersion           = "MediumRes"
res@mpDataSetName               = "Earth..2"
res@mpGridAndLimbOn             =  False
res@mpGeophysicalLineColor      = "Black"
res@mpNationalLineColor         = "Black"
res@mpUSStateLineColor          = "Black"
res@mpCountyLineColor           = "gray50"
res@mpCountyLineThicknessF      =  1
res@mpUSStateLineThicknessF     =  6
res@mpNationalLineThicknessF    =  6
res@mpGeophysicalLineThicknessF =  6
res@mpOutlineDrawOrder          = "PostDraw"

; Contour Settings
res@cnLevelSelectionMode   = "ExplicitLevels"     ; Set manual contour levels
res@cnLevels               = (/ .01, .02, .05, .1, .2, .5, 1, 3, 6, 12, 18, 24/)

res@cnFillOn             = True               ; Turn on contour fill
res@cnLinesOn            = False              ; Turn off contour lines
res@cnLineLabelsOn       = False              ; Turn off contour labels

res@cnFillOn          =  True                 ; Title and Labels Settings
res@tiMainString      = "Acuumulated Snow"
res@lbTitleOn         =  True
res@cnFillPalette     = "CBR_wet" 
res@lbTitleString     = "Snow (inches)"
res@lbTitleFontHeightF = .02

markerres                 = True
markerres@gsMarkerColor   = "Black"                 ; City marker settings
markerres@gsMarkerIndex   =  16
markerres@gsMarkerSizeF   =  10

res= wrf_map_resources(a,res)
plot = gsn_csm_contour_map(wks,snow,res)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Filtering Data 
ii = ind(lats.ge.min_lat.and.lats.le.max_lat.and.lons.ge.min_lon.and.lons.le.max_lon)

;	Set Text Settings
righttext               = True
righttext@txFont        = "helvetica-bold"
righttext@txFontColor   = "Black"
righttext@txFontHeightF =  0.01
righttext@txJust        = "CenterLeft"
;cities_len = strlen(cities(ii))
city_text_right=gsn_add_text(wks,plot,(cities(ii)),lons(ii),lats(ii),righttext)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;
; Retrieve the ids of the text strings that were just added so we can
; retrieve their heights, widths, and locations. This information 
; will be used to determine if any text strings are overlaying other text
; strings.
;
nstrs=dimsizes(ii)
getvalues plot
	"pmAnnoViews" : text_ids
end getvalues

 
xndc    = new(nstrs,float)     ;  X center of box in NDC coords
yndc    = new(nstrs,float)     ;  Y center of box in NDC coords
rgt     = new(nstrs,float)     ;  Hold right position of text box.
lft     = new(nstrs,float)     ;  "    left     "     "   "    " 
top     = new(nstrs,float)     ;  "    top      "     "   "    " 
bot     = new(nstrs,float)     ;  "    bottom   "     "   "    " 
width   = new(nstrs,float)     ;  width of each text box
height  = new(nstrs,float)     ;  height of each text box
max_lat_ndc = new(1,float)     ;  Top edge of plot
max_lon_ndc = new(1,float)     ;  Right edge of plot
min_lat_ndc = new(1,float)     ;  Bottom edge of plot
min_lon_ndc = new(1,float)     ;  Left edge of plot
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;       Loop through and get the width and height of each box.
do i=0,nstrs-1
	getvalues text_ids(i)
		"vpWidthF"  : width(i)
		"vpHeightF" : height(i)
	end getvalues
end do
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;       Convert the lat/lon left-center of each box & viewport edges to NDC coordinates
;
datatondc(plot,lons(ii),lats(ii),xndc,yndc)
datatondc(plot,min_lon,min_lat,min_lon_ndc,min_lat_ndc)
datatondc(plot,max_lon,max_lat,max_lon_ndc,max_lat_ndc)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Calculate the four edges of each text box in NDC coordinates.
top = yndc + height/2.
bot = yndc - height/2.
lft = xndc
rgt = xndc +  width
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;       Now we're going to loop through each text string that has been added,
;       and compare it to all other text strings that have been added to see if
;       they overlap. If an overlap is encountered, one of the strings will be
;       tagged for removal, and a box will be drawn around it (just to show,
;       for debug purposes, which text strings are getting removed).
;
removed_list = new(nstrs,integer)
keep_list = new(nstrs,integer)
rcount = 0                         ; Number of removed text boxes.
kcount = 0                         ; Number of kept text boxes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;      ibox1 is index of box that we're checking to see if it overlaps.
;      ibox2 is the index of the box that we're checking box ibox1 against.

do ibox1 = 0,nstrs-1
	ibox2 = 0
	overlap_found = False 
		do while(ibox2.lt.nstrs.and..not.overlap_found)
;
; Check if any one of the corners represented by box "ibox1" is inside
; the box representd by "ibox2".  If so, remove it.  Make sure you are
; not checking a box against itself, or against a box that has already
; been removed.
;
			if (ibox1.ne.ibox2.and.(.not.any(ibox2.eq.removed_list))) then
				if ( (top(ibox1).le.top(ibox2).and.top(ibox1).ge.bot(ibox2).and. \
					 lft(ibox1).le.rgt(ibox2).and.lft(ibox1).ge.lft(ibox2)).or. \
                                	(bot(ibox1).le.top(ibox2).and.bot(ibox1).ge.bot(ibox2).and. \
                                 	lft(ibox1).le.rgt(ibox2).and.lft(ibox1).ge.lft(ibox2)).or. \
                                	(bot(ibox1).le.top(ibox2).and.bot(ibox1).ge.bot(ibox2).and. \
                                	 rgt(ibox1).le.rgt(ibox2).and.rgt(ibox1).ge.lft(ibox2)).or. \
                                	(top(ibox1).le.top(ibox2).and.top(ibox1).ge.bot(ibox2).and. \
                                 	rgt(ibox1).le.rgt(ibox2).and.rgt(ibox1).ge.lft(ibox2)).or. \
					rgt(ibox1).ge.max_lon_ndc.or.lft(ibox1).le.min_lon_ndc.or.\
					top(ibox1).ge.max_lat_ndc.or.bot(ibox1).le.min_lat_ndc) then
        
                                 	overlap_found = True            ; Mark that an overlap has been found.

                                 	removed_list(rcount) = ibox1    ; Update removed_list and
                                 	rcount = rcount + 1             ; its counter.
				end if
			end if
		ibox2 = ibox2 + 1                                        ; Update the box counter
		end do	
    if(.not.overlap_found) then
    	keep_list(kcount) = ibox1
    	kcount = kcount +1
    end if
end do
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;	Extra Lines for Testing
;test_city=cities(ii)
;print("these are the cities removed")
;print(test_city(removed_list(:rcount-1)))
;print("these are the cities kept left?")
;print(test_city(keep_list(:kcount-1)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Here's the code that removes the overlapping text strings.
 NhlRemoveAnnotation(plot,text_ids(removed_list(:rcount-1)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 
;print(lons(keep_list(:kcount-1)))
lon_marker=lons(ii)
lat_marker=lats(ii)
city_markers=gsn_add_polymarker(wks,plot,lon_marker(keep_list(:kcount-1)),lat_marker(keep_list(:kcount-1)),markerres)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;	Now redraw the plot, which should have all of the overlapping text strings removed.

;nglogo(wks,0.295,0.94,0.05,1,1,0)
madeonpi=gsn_create_text(wks,"Made on a Raspberry Pi",righttext)
amres=True
amres@amParallelPosF   =  0.325    ; This is the center of the plot.
amres@amOrthogonalPosF =  -0.51 ; -0.5    ; This is the top edge of the plot.
amres@amJust           = "BottomCenter"
annoid3 = gsn_add_annotation(plot, madeonpi, amres)

draw(plot)
frame(wks)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
